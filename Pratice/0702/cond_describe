生产者和消费者（条件变量）说明：
    假设有1个生产者，5个消费者。生产者很快的生产（usleep(100)）,消费者很多的消费(uslseep(100))
while(1)
{
    pthread_mutex_lock(&mutex);
    if(head==NULL)
    {
        pthread_cond_wait(&cond,&mutex);/*第一个消费者pthread_mutex_lock()仅能加一把锁mutex=0，之后进入if(head==NULL)判断语句，
                                          pthread_cond_wait()使mutex++,使线程阻塞并解锁。
                                          第二个消费者便可以加锁，使之和第一个消费者一样的状态。线程阻塞并解锁。
                                          生产者可以加锁，并生产，之后解锁，siganl()至少通知一个wait()函数，使之非阻塞，并加锁。
                                          第一个生产成功free(),之后解锁。(mutex有先后顺序)第二个消费者加锁，free()失败，并导致段错误。*/
    }
    if(head==NULL)
    {
        pthread_mutex_unlock(&mutex);/*解决方法：再次判断head==NULL,因为第一个消费者消费过后，head=NULL，第二个消费者
                                       判断的话会进入判断，先解锁，之后continue开始下一次循环。(如果不解锁)，会导致其他消费者和生产者
                                       无法加锁。
                                      */
        continue;

    }
    Node *tmp=head;
    head=head->next;
    printf("customer[%d]:[%d]\n",*(int *)arg,tmp->data);
    free(tmp);
    pthread_mutex_unlock(&mutex);
    //sleep(2);
    usleep(400);


